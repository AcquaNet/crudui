package org.vaadin.crudui;

import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.ui.CustomComponent;
import org.vaadin.crudui.impl.form.AutoGeneratedVerticalCrudFormBuilder;
import org.vaadin.crudui.impl.layout.VerticalCrudLayout;

import java.util.Collection;
import java.util.Collections;
import java.util.function.Consumer;
import java.util.function.Supplier;

/**
 * @author Alejandro Duarte
 */
public abstract class AbstractCrudComponent<T> extends CustomComponent implements CrudComponent<T> {

    protected Class<T> domainType;

    protected Object[] addFormVisiblePropertyIds;
    protected String[] addFormFieldCaptions;

    protected Object[] updateFormVisiblePropertyIds;
    protected String[] updateFormFieldCaptions;
    protected Object[] updateFormDisabledPropertyIds;

    protected Object[] deleteFormVisiblePropertyIds;
    protected String[] deleteFormFieldCaptions;

    protected Consumer<T> addOperation = t -> { };
    protected Consumer<T> updateOperation = t -> { };
    protected Consumer<T> deleteOperation = t -> { };
    protected Supplier<Collection<T>> findAllOperation = () -> Collections.emptyList();

    protected CrudLayout mainLayout;
    protected CrudFormBuilder<T> crudFormBuilder;

    public AbstractCrudComponent(Class<T> domainType) {
        this(domainType, new VerticalCrudLayout());
    }

    public AbstractCrudComponent(Class<T> domainType, CrudLayout mainLayout) {
        this.domainType = domainType;
        this.mainLayout = mainLayout;
        BeanItemContainer<T> propertyIdsHelper = new BeanItemContainer<T>(domainType);
        crudFormBuilder = new AutoGeneratedVerticalCrudFormBuilder<T>();
        addFormVisiblePropertyIds = propertyIdsHelper.getContainerPropertyIds().toArray();
        updateFormVisiblePropertyIds = propertyIdsHelper.getContainerPropertyIds().toArray();
        deleteFormVisiblePropertyIds = propertyIdsHelper.getContainerPropertyIds().toArray();

        setCompositionRoot(mainLayout);
        setSizeFull();
    }

    @Override
    public void setCaption(String caption) {
        mainLayout.setCaption(caption);
    }

    @Override
    public void setAddFormVisiblePropertyIds(Object... addFormVisiblePropertyIds) {
        this.addFormVisiblePropertyIds = addFormVisiblePropertyIds;
    }

    @Override
    public void setUpdateFormVisiblePropertyIds(Object... updateFormVisiblePropertyIds) {
        this.updateFormVisiblePropertyIds = updateFormVisiblePropertyIds;
    }

    @Override
    public void setDeleteFormVisiblePropertyIds(Object... deleteFormVisiblePropertyIds) {
        this.deleteFormVisiblePropertyIds = deleteFormVisiblePropertyIds;
    }

    @Override
    public void setUpdateFormDisabledPropertyIds(Object... updateFormDisabledPropertyIds) {
        this.updateFormDisabledPropertyIds = updateFormDisabledPropertyIds;
    }

    @Override
    public void setAddFormFieldCaptions(String... addFormFieldCaptions) {
        this.addFormFieldCaptions = addFormFieldCaptions;
    }

    @Override
    public void setUpdateFormFieldCaptions(String... updateFormFieldCaptions) {
        this.updateFormFieldCaptions = updateFormFieldCaptions;
    }

    @Override
    public void setDeleteFormFieldCaptions(String... deleteFormFieldCaptions) {
        this.deleteFormFieldCaptions = deleteFormFieldCaptions;
    }

    @Override
    public CrudLayout getMainLayout() {
        return mainLayout;
    }

    @Override
    public void setCrudFormBuilder(CrudFormBuilder<T> crudFormBuilder) {
        this.crudFormBuilder = crudFormBuilder;
    }

    @Override
    public void setAddOperation(Consumer<T> addOperation) {
        this.addOperation = addOperation;
    }

    @Override
    public void setUpdateOperation(Consumer<T> updateOperation) {
        this.updateOperation = updateOperation;
    }

    @Override
    public void setDeleteOperation(Consumer<T> deleteOperation) {
        this.deleteOperation = deleteOperation;
    }

    @Override
    public void setFindAllOperation(Supplier<Collection<T>> findAllOperation) {
        this.findAllOperation = findAllOperation;
    }

    @Override
    public void setOperations(Consumer<T> addOperation, Consumer<T> updateOperation, Consumer<T> deleteOperation, Supplier<Collection<T>> findAllOperation) {
        setAddOperation(addOperation);
        setUpdateOperation(updateOperation);
        setDeleteOperation(deleteOperation);
        setFindAllOperation(findAllOperation);
    }

    @Override
    public void setCrudListener(CrudListener<T> crudListener) {
        setAddOperation(crudListener::add);
        setUpdateOperation(crudListener::update);
        setDeleteOperation(crudListener::delete);
        setFindAllOperation(crudListener::findAll);
    }

}
