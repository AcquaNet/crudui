package org.vaadin.crudui.crud.impl;

import java.util.List;

import org.vaadin.crudui.crud.CrudListener;
import org.vaadin.crudui.crud.CrudOperation;
import org.vaadin.crudui.form.AbstractAutoGeneratedCrudFormFactory;
import org.vaadin.crudui.form.CrudFormConfiguration;
import org.vaadin.crudui.layout.CrudLayout;
import org.vaadin.crudui.layout.impl.WindowBasedCrudLayout;

import com.vaadin.flow.component.AttachEvent;
import com.vaadin.flow.component.ClickEvent;
import com.vaadin.flow.component.Component;
import com.vaadin.flow.component.ComponentEventListener;
import com.vaadin.flow.component.HasValueAndElement;
import com.vaadin.flow.component.Text;
import com.vaadin.flow.component.button.Button;
import com.vaadin.flow.component.dialog.Dialog;
import com.vaadin.flow.component.grid.Grid;
import com.vaadin.flow.component.html.Div;
import com.vaadin.flow.component.html.Label;
import com.vaadin.flow.component.icon.Icon;
import com.vaadin.flow.component.icon.VaadinIcons;
import com.vaadin.flow.component.notification.Notification;
import com.vaadin.flow.component.orderedlayout.FlexComponent.Alignment;
import com.vaadin.flow.component.orderedlayout.HorizontalLayout;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.data.binder.Binder;

/**
 * @author Alejandro Duarte
 */
public class EditableGridCrud<T> extends GridCrud<T> {

    // FIXME find replacement
    // protected Editor<T> editor;

    public class GridOnlyCrudFormFactory<T> extends AbstractAutoGeneratedCrudFormFactory<T> {
        public GridOnlyCrudFormFactory(Class<T> domainType) {
            super(domainType);
        }

        @Override
        public Component buildNewForm(CrudOperation operation, T domainObject, boolean readOnly, ComponentEventListener<ClickEvent<Button>> cancelButtonClickListener, ComponentEventListener<ClickEvent<Button>> operationButtonClickListener) {
            throw new UnsupportedOperationException("Building forms is not supported. Grid.Editor is used instead.");
        }

        @Override
        public List<HasValueAndElement> buildFields(CrudOperation operation, T domainObject, boolean readOnly) {
            return super.buildFields(operation, domainObject, readOnly);
        }

        @Override
        public CrudFormConfiguration getConfiguration(CrudOperation operation) {
            return super.getConfiguration(operation);
        }

        public Binder<T> getBinder() {
            return binder;
        }
    }

    public EditableGridCrud(Class<T> domainType) {
        this(domainType, new WindowBasedCrudLayout(), null);
    }

    public EditableGridCrud(Class<T> domainType, CrudLayout crudLayout) {
        this(domainType, crudLayout, null);
    }

    public EditableGridCrud(Class<T> domainType, CrudListener<T> crudListener) {
        this(domainType, new WindowBasedCrudLayout(), crudListener);
    }

    public EditableGridCrud(Class<T> domainType, CrudLayout crudLayout, CrudListener<T> crudListener) {
        super(domainType, crudLayout, null, crudListener);
        crudFormFactory = new GridOnlyCrudFormFactory<>(domainType);
        setAddOperationVisible(false);
        setUpdateOperationVisible(false);
    }

    @Override
    protected void onAttach(AttachEvent attachEvent) {
        super.onAttach(attachEvent);
        configureEditor();
    }

    protected void configureEditor() {
        try {
            getCrudFormFactory().buildFields(CrudOperation.UPDATE, domainType.newInstance(), false);
            // editor = grid.getEditor();
            // editor.setEnabled(true);
            // editor.addSaveListener(e -> {
            // try {
            // T updatedObject = updateOperation.perform(e.getBean());
            // refreshGrid();
            // if (items.contains(updatedObject)) {
            // grid.asSingleSelect().setValue(updatedObject);
            // // TODO: grid.scrollTo(updatedObject);
            // }
            // Notification.show(savedMessage);
            // } catch (Exception ex) {
            // crudFormFactory.showError(CrudOperation.UPDATE, ex);
            // }
            // });

            Binder<T> binder = getCrudFormFactory().getBinder();
            // editor.setBinder(binder);

            List<String> properties = getCrudFormFactory().getConfiguration(CrudOperation.UPDATE).getVisibleProperties();

            for (String property : properties) {
                Grid.Column<?> column = grid.getColumnByKey(property);
                Binder.Binding<T, ?> binding = binder.getBinding(property).get();

                // column.setEditorBinding(binding);
            }
        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        }
    }

    @Override
    protected void gridSelectionChanged() {
        updateButtons();
    }

    @Override
    protected void addButtonClicked() {
        // TODO: https://github.com/vaadin/framework/pull/10040
    }

    @Override
    protected void updateButtonClicked() {
        // TODO: https://github.com/vaadin/framework/pull/10040
    }

    @Override
    protected void deleteButtonClicked() {
        Button cancel = new Button("Cancel");
        Button delete = new Button("Delete", new Icon(VaadinIcons.TRASH));
        Div label = new Div(new Text("Do you really want to delete the selected item?"));

        // FIXME figure out Lumo equivalent
        // delete.addStyleName(ValoTheme.BUTTON_DANGER);
        HorizontalLayout buttons = new HorizontalLayout(cancel, delete);

        VerticalLayout layout = new VerticalLayout(label, buttons);
        layout.setAlignItems(Alignment.END);

        Dialog window = new Dialog(new Label("Confirm"), layout);
        // window.setModal(true);
        window.open();

        cancel.addClickListener(e -> window.close());

        delete.addClickListener(e -> {
            try {
                deleteOperation.perform(grid.asSingleSelect().getValue());
                window.close();
                refreshGrid();
                grid.asSingleSelect().clear();
                Notification.show(deletedMessage);

            } catch (Exception ex) {
                getCrudFormFactory().showError(CrudOperation.DELETE, ex);
            }
        });
    }

    @Override
    public GridOnlyCrudFormFactory<T> getCrudFormFactory() {
        return (GridOnlyCrudFormFactory<T>) super.getCrudFormFactory();
    }

}
