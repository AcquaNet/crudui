package org.vaadin.crudui.form;

import com.vaadin.data.fieldgroup.BeanFieldGroup;
import com.vaadin.data.fieldgroup.FieldGroup;
import com.vaadin.shared.util.SharedUtil;
import com.vaadin.ui.Button;
import com.vaadin.ui.ComponentContainer;
import com.vaadin.ui.Field;
import com.vaadin.ui.Notification;

import java.util.stream.StreamSupport;

/**
 * @author Alejandro Duarte
 */
public abstract class AbstractAutoGeneratedCrudFormFactory<T> implements CrudFormFactory<T> {

    protected FieldGroup addFields(T domainObject, CrudFormConfiguration configuration, ComponentContainer destLayout) {
        BeanFieldGroup<T> fieldGroup = new BeanFieldGroup(domainObject.getClass());
        fieldGroup.setItemDataSource(domainObject);
        fieldGroup.setFieldFactory(new DefaultCrudFieldFactory());

        for (CrudFieldConfiguration fieldConfig : configuration.getCrudFieldConfigurations()) {
            Object propertyId = fieldConfig.getPropertyId();
            Field<?> field;

            if (fieldConfig.getFieldProvider() != null) {
                field = fieldConfig.getFieldProvider().get();
            } else {
                field = fieldGroup.buildAndBind(SharedUtil.propertyIdToHumanFriendly(propertyId), propertyId, fieldConfig.getFieldType());
            }

            field.setWidth("100%");
            field.setCaption(fieldConfig.getCaption());
            field.setEnabled(fieldConfig.isEnabled());

            destLayout.addComponent(field);
            fieldConfig.getCreationListener().accept(field);
            fieldGroup.bind(field, propertyId);
            field.setReadOnly(fieldConfig.isReadOnly());
        }

        focusFirstField(destLayout);
        return fieldGroup;
    }

    protected void configureButton(CrudFormConfiguration configuration, Button button, FieldGroup fieldGroup) {
        button.addClickListener(e -> {
            try {
                fieldGroup.commit();
                configuration.getButtonClickListener().buttonClick(e);

            } catch (FieldGroup.CommitException e1) {
                Notification.show(configuration.getErrorMessage());
            }
        });
    }

    private static void focusFirstField(ComponentContainer destLayout) {
        StreamSupport.stream(destLayout.spliterator(), false)
                .filter(component -> Field.class.isAssignableFrom(component.getClass()))
                .map(component -> (Field) component)
                .filter(field -> field.isEnabled() && !field.isReadOnly())
                .findFirst()
                .ifPresent(field -> field.focus());
    }

}
