package org.vaadin.crudui.form.impl;

import com.vaadin.data.fieldgroup.BeanFieldGroup;
import com.vaadin.data.fieldgroup.FieldGroup;
import com.vaadin.ui.*;
import org.vaadin.crudui.crud.CrudOperation;
import org.vaadin.crudui.form.AbstractAutoGeneratedCrudFormFactory;

import java.util.List;
import java.util.function.Consumer;

/**
 * @author Alejandro Duarte
 */
public class GridLayoutCrudFormFactory<T> extends AbstractAutoGeneratedCrudFormFactory<T> {

    private int columns;
    private int rows;

    public GridLayoutCrudFormFactory(Class<T> domainType, int columns, int rows) {
        super(domainType);
        this.columns = columns;
        this.rows = rows;
    }

    @Override
    public Component buildNewForm(CrudOperation operation, T domainObject, boolean readOnly, Consumer<T> crudOperationListener) {
        Button button = new Button(buttonCaptions.get(operation), buttonIcons.get(operation));
        buttonStyleNames.get(operation).forEach(styleName -> button.addStyleName(styleName));

        HorizontalLayout footerLayout = new HorizontalLayout(button);
        footerLayout.setSizeUndefined();

        BeanFieldGroup fieldGroup = new BeanFieldGroup<>(domainObject.getClass());
        List<Field> fields = buildAndBind(operation, domainObject, readOnly, fieldGroup);

        GridLayout gridLayout = new GridLayout(columns, rows);
        gridLayout.setWidth("100%");
        gridLayout.setSpacing(true);
        fields.stream().forEach(field -> gridLayout.addComponent(field));

        VerticalLayout mainLayout = new VerticalLayout(gridLayout, footerLayout);
        mainLayout.setWidth("100%");
        mainLayout.setComponentAlignment(footerLayout, Alignment.BOTTOM_RIGHT);
        mainLayout.setMargin(true);
        mainLayout.setSpacing(true);

        button.addClickListener(e -> {
            try {
                fieldGroup.commit();
                crudOperationListener.accept(domainObject);

            } catch (FieldGroup.CommitException exception) {
                Notification.show(validationErrorMessage);
            }
        });

        return mainLayout;
    }

}
