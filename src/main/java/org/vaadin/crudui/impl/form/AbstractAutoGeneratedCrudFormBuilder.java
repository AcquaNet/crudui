package org.vaadin.crudui.impl.form;

import com.vaadin.data.fieldgroup.FieldGroup;
import com.vaadin.data.fieldgroup.FieldGroupFieldFactory;
import com.vaadin.data.validator.BeanValidator;
import com.vaadin.ui.AbstractTextField;
import com.vaadin.ui.ComponentContainer;
import com.vaadin.ui.DefaultFieldFactory;
import com.vaadin.ui.Field;
import org.vaadin.crudui.CrudFormBuilder;

import java.util.HashMap;
import java.util.Map;

/**
 * @author Alejandro Duarte
 */
public abstract class AbstractAutoGeneratedCrudFormBuilder<T> implements CrudFormBuilder<T> {

    protected FieldGroupFieldFactory fieldFactory;

    protected Map<Object, Class<? extends Field>> fieldTypes = new HashMap<>();

    public AbstractAutoGeneratedCrudFormBuilder(FieldGroupFieldFactory fieldFactory) {
        this.fieldFactory = fieldFactory;
    }

    protected void addFields(Class<?> domainObjectClass, Object[] visiblePropertyIds, Object disabledPropertyIds[], String[] fieldCaptions, boolean readOnly, FieldGroup fieldGroup, ComponentContainer destLayout) {

        for (int i = 0; i < visiblePropertyIds.length; i++) {
            Object propertyId = visiblePropertyIds[i];
            Field<?> field = fieldGroup.buildAndBind(DefaultFieldFactory.createCaptionByPropertyId(propertyId), propertyId, getFieldType(propertyId));
            field.setReadOnly(readOnly);
            field.addValidator(new BeanValidator(domainObjectClass, "" + propertyId));

            if (fieldCaptions != null) {
                field.setCaption(fieldCaptions[i]);
            }

            if (AbstractTextField.class.isAssignableFrom(field.getClass())) {
                ((AbstractTextField) field).setNullRepresentation("");
            }

            destLayout.addComponent(field);
        }

        if (disabledPropertyIds != null) {
            for (int i = 0; i < disabledPropertyIds.length; i++) {
                fieldGroup.getField(disabledPropertyIds[i]).setEnabled(false);
            }
        }
    }

    public void setFieldType(Object propertyId, Class<? extends Field> type) {
        fieldTypes.put(propertyId, type);
    }

    public Class<? extends Field> getFieldType(Object propertyId) {
        Class<? extends Field> type = fieldTypes.get(propertyId);
        return type != null ? type : Field.class;
    }

}
