import com.vaadin.annotations.Theme;
import com.vaadin.server.VaadinRequest;
import com.vaadin.ui.PasswordField;
import com.vaadin.ui.UI;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.themes.ValoTheme;
import org.vaadin.crudui.impl.crud.GridBasedCrudComponent;
import org.vaadin.crudui.impl.crud.GridCrudListener;
import org.vaadin.crudui.impl.form.AutoGeneratedVerticalCrudFormBuilder;
import org.vaadin.jetty.VaadinJettyServer;

import java.util.ArrayList;
import java.util.Collection;

/**
 * @author Alejandro Duarte
 */
@Theme(ValoTheme.THEME_NAME)
public class TestUI extends UI implements GridCrudListener<User> {

    private static ArrayList<User> users = new ArrayList<>();

    public static void main(String[] args) throws Exception {
        VaadinJettyServer server = new VaadinJettyServer(8080, TestUI.class);
        server.start();

        for (long i = 1; i <= 10; i++) {
            users.add(new User("User " + i, "email" + i + "@test.com", "password" + i));
        }
    }

    @Override
    protected void init(VaadinRequest request) {
        GridBasedCrudComponent<User> crud = new GridBasedCrudComponent<>(User.class);
        crud.setCrudListener(this);
        crud.showAllOptions();
        crud.getGrid().setColumns("id", "name", "birthDate", "email");
        crud.setNewFormVisiblePropertyIds("name", "birthDate", "email", "password");
        crud.setEditFormVisiblePropertyIds("id", "name", "birthDate", "email");
        crud.setEditFormDisabledPropertyIds("id");
        crud.setDeleteFormVisiblePropertyIds("id", "name", "birthDate", "email");

        AutoGeneratedVerticalCrudFormBuilder<User> formBuilder = new AutoGeneratedVerticalCrudFormBuilder<>();
        formBuilder.setFieldType("password", PasswordField.class);
        crud.setCrudFormBuilder(formBuilder);

        VerticalLayout mainLayout = new VerticalLayout(crud);
        mainLayout.setSizeFull();
        mainLayout.setMargin(true);
        setContent(mainLayout);
    }

    @Override
    public void add(User user) {
        users.add(user);
    }

    @Override
    public void update(User user) {
        // nothing to do
    }

    @Override
    public void delete(User user) {
        users.remove(user);
    }

    @Override
    public Collection<User> findAll() {
        return users;
    }

}
